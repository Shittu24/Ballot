{
  "language": "Solidity",
  "sources": {
    "contracts/Ballot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// 1. Error Handling\nerror Ballot__NotOwner();\nerror Ballot__UserVoted();\nerror Ballot__NoRightToVote();\nerror Ballot__SelDelegationDisallowed();\n\n// 2. Pragma\npragma solidity ^0.8.9;\n/**@title A sample Voting Contract\n * @author Ibrahim Shittu\n * @notice This contract is to create a voting contract where the chairman can \n *         assign voting right to eligible s_voters\n */\n\ncontract Ballot {\n    // This declares a new data type which will\n    // be used for variables later.\n    // It will represent a single voter.\n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        address delegate; // person delegated to\n        uint vote;   // index of the voted proposal\n    }\n\n    // This is a type for a single proposal.\n    struct Proposal {\n        bytes32 name;   // short name (up to 32 bytes)\n        uint voteCount; // number of accumulated votes\n    }\n\n    address private immutable i_owner;\n\n    // This declares a state variable that\n    // stores a `Voter` struct for each possible address.\n    mapping(address => Voter) private s_voters;\n\n    // A dynamically-sized array of `Proposal` structs.\n    Proposal[] private s_proposals;\n\n    ///////////////\n    // MODIFIER //\n    //////////////\n\n    // An onlyOwner modifier that allows only the owner(i_owner) to call certain functions\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner);\n        if (msg.sender != i_owner) revert Ballot__NotOwner();\n        _;\n    }\n\n    // Functions Order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n\n    /// Create a new ballot to choose one of `proposalNames`.\n    constructor(bytes32[] memory proposalNames) {\n        i_owner = msg.sender;\n        s_voters[i_owner].weight = 1;\n\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `s_proposals.push(...)`\n            // appends it to the end of `s_proposals`.\n            s_proposals.push(Proposal({\n                name: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    // The following two functions allow the contract to accept ETH deposits\n    // directly from a wallet without calling a function\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    /**\n     *  @notice Gives voter the right to vote and can only be called by the owner of the contract\n     * @param voter the address of the voter\n     */\n    function giveRightToVote(address voter) external onlyOwner {\n        // We set an onlyOwber modifier so only the i_owner can call this contract\n        // Then check if the voter has voted if so, revert with a custom error\n        // Also ensure the voter weight is zero \n        if(s_voters[voter].voted) revert Ballot__UserVoted();\n        require(s_voters[voter].weight == 0);\n        s_voters[voter].weight = 1;\n    }\n\n    /**\n     * @notice This allows eligible voters delegate their vote to someone else\n     * @param to the address of the delegated voter\n     */\n    function delegate(address to) external {\n        // assigns reference\n        Voter storage sender = s_voters[msg.sender];\n        if(sender.weight ==0) revert Ballot__NoRightToVote();\n        if(sender.voted) revert Ballot__UserVoted();\n        if(to == msg.sender) revert Ballot__SelDelegationDisallowed();\n\n        // Forward the delegation as long as\n        // `to` also delegated.\n        // In general, such loops are very dangerous,\n        // because if they run too long, they might\n        // need more gas than is available in a block.\n        // In this case, the delegation will not be executed,\n        // but in other situations, such loops might\n        // cause a contract to get \"stuck\" completely.\n        while (s_voters[to].delegate != address(0)) {\n            to = s_voters[to].delegate;\n\n            // We found a loop in the delegation, not allowed.\n            require(to != msg.sender, \"Found loop in delegation.\");\n        }\n\n        Voter storage delegate_ = s_voters[to];\n\n        // s_voters cannot delegate to accounts that cannot vote.\n        require(delegate_.weight >= 1);\n\n        // Since `sender` is a reference, this\n        // modifies `s_voters[msg.sender]`.\n        sender.voted = true;\n        sender.delegate = to;\n\n        if (delegate_.voted) {\n            // If the delegate already voted,\n            // directly add to the number of votes\n            s_proposals[delegate_.vote].voteCount += sender.weight;\n        } else {\n            // If the delegate did not vote yet,\n            // add to her weight.\n            delegate_.weight += sender.weight;\n        }\n    }\n\n     /**\n     * @notice This allows eligible voters and votes delegated to them to vote for their preferred proposal\n     * @param proposal the index of their preferred proposal chosen\n     */\n    function vote(uint proposal) external {\n        Voter storage sender = s_voters[msg.sender];\n        if(sender.weight ==0) revert Ballot__NoRightToVote();\n        if(sender.voted) revert Ballot__UserVoted();\n        // require(sender.weight != 0, \"Has no right to vote\");\n        // require(!sender.voted, \"Already voted.\");\n        sender.voted = true;\n        sender.vote = proposal;\n\n        // If `proposal` is out of the range of the array,\n        // this will throw automatically and revert all\n        // changes.\n        s_proposals[proposal].voteCount += sender.weight;\n    }\n\n    /**\n     * @notice This calculates the votes and selects the winning proposal\n     * @dev Computes the winning proposal taking all previous votes into account\n     */\n    function winningProposal() public view\n            returns (uint winningProposal_)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < s_proposals.length; p++) {\n            if (s_proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = s_proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n     /**\n     * @notice After all computation, this prints the winner name\n     * @return winnerName_ the winner's name in bytes which can later be converted to string\n     */\n    function winnerName() external view\n            returns (bytes32 winnerName_)\n    {\n        winnerName_ = s_proposals[winningProposal()].name;\n    }\n\n    /**\n     * @notice this gets the adress of the owner of the contract\n     */\n    function getOwner() public view returns(address){\n        return i_owner;\n    }\n\n    /**\n     * @notice this gets the address of each eligible voters\n     * @param voterAddress the address of a voter\n     */\n    function getVoters(address voterAddress) public view returns (Voter memory) {\n        return s_voters[voterAddress];\n    }\n\n    /**\n     * @notice this gets theindex of each available proposals\n     * @param index is the number of a particular proposal \n     */\n    function getProposals(uint256 index) public view returns (Proposal memory) {\n        return s_proposals[index];\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}