{
  "address": "0xEd4D7d2bDf1734790cE2998ACa66D6c1f123e5DE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Ballot__NoRightToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ballot__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ballot__SelDelegationDisallowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ballot__UserVoted",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd9b114a4ce32ee1781b2bf6ec1a716d0d46347c14c5ad68611b092dc325f4120",
  "receipt": {
    "to": null,
    "from": "0xCF4ba4D491203582dC5B679B6e12cF19931d1912",
    "contractAddress": "0xEd4D7d2bDf1734790cE2998ACa66D6c1f123e5DE",
    "transactionIndex": 2,
    "gasUsed": "950036",
    "logsBloom": "0x
    "blockHash": "0x5aa59abd5068a62a2445e53904d0c2a447698fc133da7d29fcddf479679024e8",
    "transactionHash": "0xd9b114a4ce32ee1781b2bf6ec1a716d0d46347c14c5ad68611b092dc325f4120",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 30826823,
        "transactionHash": "0xd9b114a4ce32ee1781b2bf6ec1a716d0d46347c14c5ad68611b092dc325f4120",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cf4ba4d491203582dc5b679b6e12cf19931d1912",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000087021bbc2740000000000000000000000000000000000000000000000000006d24b0bf6e9483b0000000000000000000000000000000000000000000018de3ad3fe9d4914355100000000000000000000000000000000000000000000000006c9daea3b26d43b0000000000000000000000000000000000000000000018de3adc6ebf04d6a951",
        "logIndex": 6,
        "blockHash": "0x5aa59abd5068a62a2445e53904d0c2a447698fc133da7d29fcddf479679024e8"
      }
    ],
    "blockNumber": 30826823,
    "cumulativeGasUsed": "3732862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x41646577616c6500000000000000000000000000000000000000000000000000",
      "0x4f706579656d6900000000000000000000000000000000000000000000000000",
      "0x204f6c6100000000000000000000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e9b7a6fc1253d2885c2a7997d7249b06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Ballot__NoRightToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ballot__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ballot__SelDelegationDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ballot__UserVoted\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ibrahim Shittu\",\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"params\":{\"to\":\"the address of the delegated voter\"}},\"giveRightToVote(address)\":{\"params\":{\"voter\":\"the address of the voter\"}},\"vote(uint256)\":{\"params\":{\"proposal\":\"the index of their preferred proposal chosen\"}},\"winnerName()\":{\"returns\":{\"winnerName_\":\"the winner's name in bytes which can later be converted to string\"}},\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account\"}},\"title\":\"A sample Voting Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new ballot to choose one of `proposalNames`.\"},\"delegate(address)\":{\"notice\":\"This allows eligible voters delegate their vote to someone else\"},\"getOwner()\":{\"notice\":\"this gets the adress of the owner of the contract\"},\"giveRightToVote(address)\":{\"notice\":\"Gives voter the right to vote and can only be called by the owner of the contract\"},\"vote(uint256)\":{\"notice\":\"This allows eligible voters and votes delegated to them to vote for their preferred proposal\"},\"winnerName()\":{\"notice\":\"After all computation, this prints the winner name\"},\"winningProposal()\":{\"notice\":\"This calculates the votes and selects the winning proposal\"}},\"notice\":\"This contract is to create a voting contract where the chairman can          assign voting right to eligible s_voters\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// 1. Error Handling\\nerror Ballot__NotOwner();\\nerror Ballot__UserVoted();\\nerror Ballot__NoRightToVote();\\nerror Ballot__SelDelegationDisallowed();\\n\\n// 2. Pragma\\npragma solidity ^0.8.9;\\n/**@title A sample Voting Contract\\n * @author Ibrahim Shittu\\n * @notice This contract is to create a voting contract where the chairman can \\n *         assign voting right to eligible s_voters\\n */\\n\\ncontract Ballot {\\n    // This declares a new data type which will\\n    // be used for variables later.\\n    // It will represent a single voter.\\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted proposal\\n    }\\n\\n    // This is a type for a single proposal.\\n    struct Proposal {\\n        bytes32 name;   // short name (up to 32 bytes)\\n        uint voteCount; // number of accumulated votes\\n    }\\n\\n    address private immutable i_owner;\\n\\n    // This declares a state variable that\\n    // stores a `Voter` struct for each possible address.\\n    mapping(address => Voter) public s_voters;\\n\\n    // A dynamically-sized array of `Proposal` structs.\\n    Proposal[] public s_proposals;\\n\\n    ///////////////\\n    // MODIFIER //\\n    //////////////\\n\\n    // An onlyOwner modifier that allows only the owner(i_owner) to call certain functions\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert Ballot__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    /// Create a new ballot to choose one of `proposalNames`.\\n    constructor(bytes32[] memory proposalNames) {\\n        i_owner = msg.sender;\\n        s_voters[i_owner].weight = 1;\\n\\n        // For each of the provided proposal names,\\n        // create a new proposal object and add it\\n        // to the end of the array.\\n        for (uint i = 0; i < proposalNames.length; i++) {\\n            // `Proposal({...})` creates a temporary\\n            // Proposal object and `s_proposals.push(...)`\\n            // appends it to the end of `s_proposals`.\\n            s_proposals.push(Proposal({\\n                name: proposalNames[i],\\n                voteCount: 0\\n            }));\\n        }\\n    }\\n\\n    // The following two functions allow the contract to accept ETH deposits\\n    // directly from a wallet without calling a function\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    /**\\n     *  @notice Gives voter the right to vote and can only be called by the owner of the contract\\n     * @param voter the address of the voter\\n     */\\n    function giveRightToVote(address voter) external onlyOwner {\\n        // We set an onlyOwber modifier so only the i_owner can call this contract\\n        // Then check if the voter has voted if so, revert with a custom error\\n        // Also ensure the voter weight is zero \\n        if(s_voters[voter].voted) revert Ballot__UserVoted();\\n        require(s_voters[voter].weight == 0);\\n        s_voters[voter].weight = 1;\\n    }\\n\\n    /**\\n     * @notice This allows eligible voters delegate their vote to someone else\\n     * @param to the address of the delegated voter\\n     */\\n    function delegate(address to) external {\\n        // assigns reference\\n        Voter storage sender = s_voters[msg.sender];\\n        if(sender.weight ==0) revert Ballot__NoRightToVote();\\n        if(sender.voted) revert Ballot__UserVoted();\\n        if(to == msg.sender) revert Ballot__SelDelegationDisallowed();\\n\\n        // Forward the delegation as long as\\n        // `to` also delegated.\\n        // In general, such loops are very dangerous,\\n        // because if they run too long, they might\\n        // need more gas than is available in a block.\\n        // In this case, the delegation will not be executed,\\n        // but in other situations, such loops might\\n        // cause a contract to get \\\"stuck\\\" completely.\\n        while (s_voters[to].delegate != address(0)) {\\n            to = s_voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n\\n        Voter storage delegate_ = s_voters[to];\\n\\n        // s_voters cannot delegate to accounts that cannot vote.\\n        require(delegate_.weight >= 1);\\n\\n        // Since `sender` is a reference, this\\n        // modifies `s_voters[msg.sender]`.\\n        sender.voted = true;\\n        sender.delegate = to;\\n\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            s_proposals[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n     /**\\n     * @notice This allows eligible voters and votes delegated to them to vote for their preferred proposal\\n     * @param proposal the index of their preferred proposal chosen\\n     */\\n    function vote(uint proposal) external {\\n        Voter storage sender = s_voters[msg.sender];\\n        if(sender.weight ==0) revert Ballot__NoRightToVote();\\n        if(sender.voted) revert Ballot__UserVoted();\\n        // require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        // require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = proposal;\\n\\n        // If `proposal` is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        s_proposals[proposal].voteCount += sender.weight;\\n    }\\n\\n    /**\\n     * @notice This calculates the votes and selects the winning proposal\\n     * @dev Computes the winning proposal taking all previous votes into account\\n     */\\n    function winningProposal() public view\\n            returns (uint winningProposal_)\\n    {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < s_proposals.length; p++) {\\n            if (s_proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = s_proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n     /**\\n     * @notice After all computation, this prints the winner name\\n     * @return winnerName_ the winner's name in bytes which can later be converted to string\\n     */\\n    function winnerName() external view\\n            returns (bytes32 winnerName_)\\n    {\\n        winnerName_ = s_proposals[winningProposal()].name;\\n    }\\n\\n    /**\\n     * @notice this gets the adress of the owner of the contract\\n     */\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n}\",\"keccak256\":\"0xb4f682945b99c941583f9128b8e0386caf5c406ef38cd53e884f81a579ba2ce6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200121a3803806200121a833981810160405281019062000037919062000317565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050600160008060805173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200014b5760016040518060400160405280848481518110620000e457620000e362000368565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200014290620003d0565b915050620000b7565b50506200041e565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001b7826200016c565b810181811067ffffffffffffffff82111715620001d957620001d86200017d565b5b80604052505050565b6000620001ee62000153565b9050620001fc8282620001ac565b919050565b600067ffffffffffffffff8211156200021f576200021e6200017d565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6200024a8162000235565b81146200025657600080fd5b50565b6000815190506200026a816200023f565b92915050565b600062000287620002818462000201565b620001e2565b90508083825260208201905060208402830185811115620002ad57620002ac62000230565b5b835b81811015620002da5780620002c5888262000259565b845260208401935050602081019050620002af565b5050509392505050565b600082601f830112620002fc57620002fb62000167565b5b81516200030e84826020860162000270565b91505092915050565b60006020828403121562000330576200032f6200015d565b5b600082015167ffffffffffffffff81111562000351576200035062000162565b5b6200035f84828501620002e4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620003dd82620003c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000413576200041262000397565b5b600182019050919050565b608051610dd962000441600039600081816107f6015261081c0152610dd96000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101455780639e7b8d6114610170578063a7e9df5614610199578063e2ba53f0146101d757610086565b80630121b93f146100885780635c19a95c146100b1578063609ff1bd146100da5780636e433ae21461010557610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610a60565b610202565b005b3480156100bd57600080fd5b506100d860048036038101906100d39190610aeb565b610336565b005b3480156100e657600080fd5b506100ef61070d565b6040516100fc9190610b27565b60405180910390f35b34801561011157600080fd5b5061012c60048036038101906101279190610aeb565b610795565b60405161013c9493929190610b6c565b60405180910390f35b34801561015157600080fd5b5061015a6107f2565b6040516101679190610bb1565b60405180910390f35b34801561017c57600080fd5b5061019760048036038101906101929190610aeb565b61081a565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190610a60565b6109bd565b6040516101ce929190610be5565b60405180910390f35b3480156101e357600080fd5b506101ec6109f1565b6040516101f99190610c0e565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610283576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff16156102cc576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546001838154811061030b5761030a610c29565b5b9060005260206000209060020201600101600082825461032b9190610c87565b925050819055505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156103b7576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff1615610400576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610466576040517f4526170b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105d4576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690610d3a565b60405180910390fd5b610467565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561062857600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff16156106e857816000015460018260020154815481106106bc576106bb610c29565b5b906000526020600020906002020160010160008282546106dc9190610c87565b92505081905550610708565b81600001548160000160008282546107009190610c87565b925050819055505b505050565b6000806000905060005b60018054905081101561079057816001828154811061073957610738610c29565b5b906000526020600020906002020160010154111561077d576001818154811061076557610764610c29565b5b90600052602060002090600202016001015491508092505b808061078890610d5a565b915050610717565b505090565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461089f576040517fab4e909900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610925576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461097357600080fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b600181815481106109cd57600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600060016109fd61070d565b81548110610a0e57610a0d610c29565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b610a3d81610a2a565b8114610a4857600080fd5b50565b600081359050610a5a81610a34565b92915050565b600060208284031215610a7657610a75610a25565b5b6000610a8484828501610a4b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab882610a8d565b9050919050565b610ac881610aad565b8114610ad357600080fd5b50565b600081359050610ae581610abf565b92915050565b600060208284031215610b0157610b00610a25565b5b6000610b0f84828501610ad6565b91505092915050565b610b2181610a2a565b82525050565b6000602082019050610b3c6000830184610b18565b92915050565b60008115159050919050565b610b5781610b42565b82525050565b610b6681610aad565b82525050565b6000608082019050610b816000830187610b18565b610b8e6020830186610b4e565b610b9b6040830185610b5d565b610ba86060830184610b18565b95945050505050565b6000602082019050610bc66000830184610b5d565b92915050565b6000819050919050565b610bdf81610bcc565b82525050565b6000604082019050610bfa6000830185610bd6565b610c076020830184610b18565b9392505050565b6000602082019050610c236000830184610bd6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9282610a2a565b9150610c9d83610a2a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cd257610cd1610c58565b5b828201905092915050565b600082825260208201905092915050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610d24601983610cdd565b9150610d2f82610cee565b602082019050919050565b60006020820190508181036000830152610d5381610d17565b9050919050565b6000610d6582610a2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9857610d97610c58565b5b60018201905091905056fea2646970667358221220c277e04170d50ca4b02a748c974e6db378825f96fce83b521c3113c81e656a5864736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101455780639e7b8d6114610170578063a7e9df5614610199578063e2ba53f0146101d757610086565b80630121b93f146100885780635c19a95c146100b1578063609ff1bd146100da5780636e433ae21461010557610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610a60565b610202565b005b3480156100bd57600080fd5b506100d860048036038101906100d39190610aeb565b610336565b005b3480156100e657600080fd5b506100ef61070d565b6040516100fc9190610b27565b60405180910390f35b34801561011157600080fd5b5061012c60048036038101906101279190610aeb565b610795565b60405161013c9493929190610b6c565b60405180910390f35b34801561015157600080fd5b5061015a6107f2565b6040516101679190610bb1565b60405180910390f35b34801561017c57600080fd5b5061019760048036038101906101929190610aeb565b61081a565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190610a60565b6109bd565b6040516101ce929190610be5565b60405180910390f35b3480156101e357600080fd5b506101ec6109f1565b6040516101f99190610c0e565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610283576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff16156102cc576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546001838154811061030b5761030a610c29565b5b9060005260206000209060020201600101600082825461032b9190610c87565b925050819055505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156103b7576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff1615610400576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610466576040517f4526170b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105d4576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690610d3a565b60405180910390fd5b610467565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561062857600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff16156106e857816000015460018260020154815481106106bc576106bb610c29565b5b906000526020600020906002020160010160008282546106dc9190610c87565b92505081905550610708565b81600001548160000160008282546107009190610c87565b925050819055505b505050565b6000806000905060005b60018054905081101561079057816001828154811061073957610738610c29565b5b906000526020600020906002020160010154111561077d576001818154811061076557610764610c29565b5b90600052602060002090600202016001015491508092505b808061078890610d5a565b915050610717565b505090565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461089f576040517fab4e909900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610925576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461097357600080fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b600181815481106109cd57600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600060016109fd61070d565b81548110610a0e57610a0d610c29565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b610a3d81610a2a565b8114610a4857600080fd5b50565b600081359050610a5a81610a34565b92915050565b600060208284031215610a7657610a75610a25565b5b6000610a8484828501610a4b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab882610a8d565b9050919050565b610ac881610aad565b8114610ad357600080fd5b50565b600081359050610ae581610abf565b92915050565b600060208284031215610b0157610b00610a25565b5b6000610b0f84828501610ad6565b91505092915050565b610b2181610a2a565b82525050565b6000602082019050610b3c6000830184610b18565b92915050565b60008115159050919050565b610b5781610b42565b82525050565b610b6681610aad565b82525050565b6000608082019050610b816000830187610b18565b610b8e6020830186610b4e565b610b9b6040830185610b5d565b610ba86060830184610b18565b95945050505050565b6000602082019050610bc66000830184610b5d565b92915050565b6000819050919050565b610bdf81610bcc565b82525050565b6000604082019050610bfa6000830185610bd6565b610c076020830184610b18565b9392505050565b6000602082019050610c236000830184610bd6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9282610a2a565b9150610c9d83610a2a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cd257610cd1610c58565b5b828201905092915050565b600082825260208201905092915050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610d24601983610cdd565b9150610d2f82610cee565b602082019050919050565b60006020820190508181036000830152610d5381610d17565b9050919050565b6000610d6582610a2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9857610d97610c58565b5b60018201905091905056fea2646970667358221220c277e04170d50ca4b02a748c974e6db378825f96fce83b521c3113c81e656a5864736f6c634300080b0033",
  "devdoc": {
    "author": "Ibrahim Shittu",
    "kind": "dev",
    "methods": {
      "delegate(address)": {
        "params": {
          "to": "the address of the delegated voter"
        }
      },
      "giveRightToVote(address)": {
        "params": {
          "voter": "the address of the voter"
        }
      },
      "vote(uint256)": {
        "params": {
          "proposal": "the index of their preferred proposal chosen"
        }
      },
      "winnerName()": {
        "returns": {
          "winnerName_": "the winner's name in bytes which can later be converted to string"
        }
      },
      "winningProposal()": {
        "details": "Computes the winning proposal taking all previous votes into account"
      }
    },
    "title": "A sample Voting Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new ballot to choose one of `proposalNames`."
      },
      "delegate(address)": {
        "notice": "This allows eligible voters delegate their vote to someone else"
      },
      "getOwner()": {
        "notice": "this gets the adress of the owner of the contract"
      },
      "giveRightToVote(address)": {
        "notice": "Gives voter the right to vote and can only be called by the owner of the contract"
      },
      "vote(uint256)": {
        "notice": "This allows eligible voters and votes delegated to them to vote for their preferred proposal"
      },
      "winnerName()": {
        "notice": "After all computation, this prints the winner name"
      },
      "winningProposal()": {
        "notice": "This calculates the votes and selects the winning proposal"
      }
    },
    "notice": "This contract is to create a voting contract where the chairman can          assign voting right to eligible s_voters",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "s_voters",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Voter)19_storage)"
      },
      {
        "astId": 35,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "s_proposals",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Proposal)24_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)24_storage)dyn_storage": {
        "base": "t_struct(Proposal)24_storage",
        "encoding": "dynamic_array",
        "label": "struct Ballot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Voter)19_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ballot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)19_storage"
      },
      "t_struct(Proposal)24_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 23,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)19_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Voter",
        "members": [
          {
            "astId": 12,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "weight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 16,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "delegate",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}