{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Ballot__NoRightToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ballot__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ballot__SelDelegationDisallowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ballot__UserVoted",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x01babd489817f9453ee52616ddb926a1f6ebd1e4b367ddf784cb2fc346aa00ae",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "974060",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf2c8b39a4246d349e3aca6fa664414bcc0188499b5bfab9228df308da572597a",
    "transactionHash": "0x01babd489817f9453ee52616ddb926a1f6ebd1e4b367ddf784cb2fc346aa00ae",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "974060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x41646577616c6500000000000000000000000000000000000000000000000000",
      "0x4f706579656d6900000000000000000000000000000000000000000000000000",
      "0x204f6c6100000000000000000000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "fb2d89fec336008d495796e9066dbe77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Ballot__NoRightToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ballot__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ballot__SelDelegationDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ballot__UserVoted\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ibrahim Shittu\",\"kind\":\"dev\",\"methods\":{\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account.\"}},\"title\":\"A sample Voting Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new ballot to choose one of `proposalNames`.\"},\"delegate(address)\":{\"notice\":\"Delegate your vote to the voter `to`.\"},\"vote(uint256)\":{\"notice\":\"Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`.\"}},\"notice\":\"This contract is to create a voting contract where the chairman can          assign voting right to eligible voters\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// 1. Error Handling\\nerror Ballot__NotOwner();\\nerror Ballot__UserVoted();\\nerror Ballot__NoRightToVote();\\nerror Ballot__SelDelegationDisallowed();\\n\\n// 2. Pragma\\npragma solidity ^0.8.7;\\n/**@title A sample Voting Contract\\n * @author Ibrahim Shittu\\n * @notice This contract is to create a voting contract where the chairman can \\n *         assign voting right to eligible voters\\n */\\n\\ncontract Ballot {\\n    // This declares a new data type which will\\n    // be used for variables later.\\n    // It will represent a single voter.\\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted proposal\\n    }\\n\\n    // This is a type for a single proposal.\\n    struct Proposal {\\n        bytes32 name;   // short name (up to 32 bytes)\\n        uint voteCount; // number of accumulated votes\\n    }\\n\\n    address public chairperson;\\n\\n    // This declares a state variable that\\n    // stores a `Voter` struct for each possible address.\\n    mapping(address => Voter) public voters;\\n\\n    // A dynamically-sized array of `Proposal` structs.\\n    Proposal[] public proposals;\\n\\n    /// Create a new ballot to choose one of `proposalNames`.\\n    constructor(bytes32[] memory proposalNames) {\\n        chairperson = msg.sender;\\n        voters[chairperson].weight = 1;\\n\\n        // For each of the provided proposal names,\\n        // create a new proposal object and add it\\n        // to the end of the array.\\n        for (uint i = 0; i < proposalNames.length; i++) {\\n            // `Proposal({...})` creates a temporary\\n            // Proposal object and `proposals.push(...)`\\n            // appends it to the end of `proposals`.\\n            proposals.push(Proposal({\\n                name: proposalNames[i],\\n                voteCount: 0\\n            }));\\n        }\\n    }\\n\\n    // Modifiers\\n    // An onlyOwner modifier that allows only the owner(chairperson) to call certain functions\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != chairperson) revert Ballot__NotOwner();\\n        _;\\n    }\\n\\n    // Give `voter` the right to vote on this ballot.\\n    // May only be called by `chairperson`.\\n    function giveRightToVote(address voter) external onlyOwner {\\n        // We set an onlyOwber modifier so only the chairperson can call this contract\\n        // Then check if the voter has voted if so, revert with a custom error\\n        // Also ensure the voter weight is zero \\n        if(voters[voter].voted) revert Ballot__UserVoted();\\n        require(voters[voter].weight == 0);\\n        voters[voter].weight = 1;\\n    }\\n\\n    /// Delegate your vote to the voter `to`.\\n    function delegate(address to) external {\\n        // assigns reference\\n        Voter storage sender = voters[msg.sender];\\n        if(sender.weight ==0) revert Ballot__NoRightToVote();\\n        if(sender.voted) revert Ballot__UserVoted();\\n        if(to == msg.sender) revert Ballot__SelDelegationDisallowed();\\n\\n        // Forward the delegation as long as\\n        // `to` also delegated.\\n        // In general, such loops are very dangerous,\\n        // because if they run too long, they might\\n        // need more gas than is available in a block.\\n        // In this case, the delegation will not be executed,\\n        // but in other situations, such loops might\\n        // cause a contract to get \\\"stuck\\\" completely.\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n\\n        Voter storage delegate_ = voters[to];\\n\\n        // Voters cannot delegate to accounts that cannot vote.\\n        require(delegate_.weight >= 1);\\n\\n        // Since `sender` is a reference, this\\n        // modifies `voters[msg.sender]`.\\n        sender.voted = true;\\n        sender.delegate = to;\\n\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n    /// Give your vote (including votes delegated to you)\\n    /// to proposal `proposals[proposal].name`.\\n    function vote(uint proposal) external {\\n        Voter storage sender = voters[msg.sender];\\n        if(sender.weight ==0) revert Ballot__NoRightToVote();\\n        if(sender.voted) revert Ballot__UserVoted();\\n        // require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        // require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = proposal;\\n\\n        // If `proposal` is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        proposals[proposal].voteCount += sender.weight;\\n    }\\n\\n    /// @dev Computes the winning proposal taking all\\n    /// previous votes into account.\\n    function winningProposal() public view\\n            returns (uint winningProposal_)\\n    {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    // Calls winningProposal() function to get the index\\n    // of the winner contained in the proposals array and then\\n    // returns the name of the winner\\n    function winnerName() external view\\n            returns (bytes32 winnerName_)\\n    {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n\\n    // The following two functions allow the contract to accept ETH deposits\\n    // directly from a wallet without calling a function\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n    \\n}\",\"keccak256\":\"0x47ffa0eb4ad1123e21e253dd89b0fdfd247db197dd3b85321f5764e892b8e568\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200123538038062001235833981810160405281019062000037919062000342565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017657600260405180604001604052808484815181106200010f576200010e62000393565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200016d90620003fb565b915050620000e2565b505062000449565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001e28262000197565b810181811067ffffffffffffffff82111715620002045762000203620001a8565b5b80604052505050565b6000620002196200017e565b9050620002278282620001d7565b919050565b600067ffffffffffffffff8211156200024a5762000249620001a8565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620002758162000260565b81146200028157600080fd5b50565b60008151905062000295816200026a565b92915050565b6000620002b2620002ac846200022c565b6200020d565b90508083825260208201905060208402830185811115620002d857620002d76200025b565b5b835b81811015620003055780620002f0888262000284565b845260208401935050602081019050620002da565b5050509392505050565b600082601f83011262000327576200032662000192565b5b8151620003398482602086016200029b565b91505092915050565b6000602082840312156200035b576200035a62000188565b5b600082015167ffffffffffffffff8111156200037c576200037b6200018d565b5b6200038a848285016200030f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200040882620003f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200043e576200043d620003c2565b5b600182019050919050565b610ddc80620004596000396000f3fe60806040526004361061007f5760003560e01c8063609ff1bd1161004e578063609ff1bd146101435780639e7b8d611461016e578063a3ec138d14610197578063e2ba53f0146101d757610086565b80630121b93f14610088578063013cf08b146100b15780632e4176cf146100ef5780635c19a95c1461011a57610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610a63565b610202565b005b3480156100bd57600080fd5b506100d860048036038101906100d39190610a63565b610337565b6040516100e6929190610ab8565b60405180910390f35b3480156100fb57600080fd5b5061010461036b565b6040516101119190610b22565b60405180910390f35b34801561012657600080fd5b50610141600480360381019061013c9190610b69565b61038f565b005b34801561014f57600080fd5b5061015861076a565b6040516101659190610b96565b60405180910390f35b34801561017a57600080fd5b5061019560048036038101906101909190610b69565b6107f2565b005b3480156101a357600080fd5b506101be60048036038101906101b99190610b69565b610997565b6040516101ce9493929190610bcc565b60405180910390f35b3480156101e357600080fd5b506101ec6109f4565b6040516101f99190610c11565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610284576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff16156102cd576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061030c5761030b610c2c565b5b9060005260206000209060020201600101600082825461032c9190610c8a565b925050819055505050565b6002818154811061034757600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610411576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff161561045a576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156104c0576040517f4526170b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461063057600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062290610d3d565b60405180910390fd5b6104c1565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561068557600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff1615610745578160000154600282600201548154811061071957610718610c2c565b5b906000526020600020906002020160010160008282546107399190610c8a565b92505081905550610765565b816000015481600001600082825461075d9190610c8a565b925050819055505b505050565b6000806000905060005b6002805490508110156107ed57816002828154811061079657610795610c2c565b5b90600052602060002090600202016001015411156107da57600281815481106107c2576107c1610c2c565b5b90600052602060002090600202016001015491508092505b80806107e590610d5d565b915050610774565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610877576040517fab4e909900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156108fe576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461094d57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60006002610a0061076a565b81548110610a1157610a10610c2c565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b610a4081610a2d565b8114610a4b57600080fd5b50565b600081359050610a5d81610a37565b92915050565b600060208284031215610a7957610a78610a28565b5b6000610a8784828501610a4e565b91505092915050565b6000819050919050565b610aa381610a90565b82525050565b610ab281610a2d565b82525050565b6000604082019050610acd6000830185610a9a565b610ada6020830184610aa9565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0c82610ae1565b9050919050565b610b1c81610b01565b82525050565b6000602082019050610b376000830184610b13565b92915050565b610b4681610b01565b8114610b5157600080fd5b50565b600081359050610b6381610b3d565b92915050565b600060208284031215610b7f57610b7e610a28565b5b6000610b8d84828501610b54565b91505092915050565b6000602082019050610bab6000830184610aa9565b92915050565b60008115159050919050565b610bc681610bb1565b82525050565b6000608082019050610be16000830187610aa9565b610bee6020830186610bbd565b610bfb6040830185610b13565b610c086060830184610aa9565b95945050505050565b6000602082019050610c266000830184610a9a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9582610a2d565b9150610ca083610a2d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cd557610cd4610c5b565b5b828201905092915050565b600082825260208201905092915050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610d27601983610ce0565b9150610d3282610cf1565b602082019050919050565b60006020820190508181036000830152610d5681610d1a565b9050919050565b6000610d6882610a2d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9b57610d9a610c5b565b5b60018201905091905056fea264697066735822122049b3d7a08e25d6a0a16c32136bebce5f41cf0685b8390797680092601d2b7ed564736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063609ff1bd1161004e578063609ff1bd146101435780639e7b8d611461016e578063a3ec138d14610197578063e2ba53f0146101d757610086565b80630121b93f14610088578063013cf08b146100b15780632e4176cf146100ef5780635c19a95c1461011a57610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610a63565b610202565b005b3480156100bd57600080fd5b506100d860048036038101906100d39190610a63565b610337565b6040516100e6929190610ab8565b60405180910390f35b3480156100fb57600080fd5b5061010461036b565b6040516101119190610b22565b60405180910390f35b34801561012657600080fd5b50610141600480360381019061013c9190610b69565b61038f565b005b34801561014f57600080fd5b5061015861076a565b6040516101659190610b96565b60405180910390f35b34801561017a57600080fd5b5061019560048036038101906101909190610b69565b6107f2565b005b3480156101a357600080fd5b506101be60048036038101906101b99190610b69565b610997565b6040516101ce9493929190610bcc565b60405180910390f35b3480156101e357600080fd5b506101ec6109f4565b6040516101f99190610c11565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610284576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff16156102cd576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061030c5761030b610c2c565b5b9060005260206000209060020201600101600082825461032c9190610c8a565b925050819055505050565b6002818154811061034757600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610411576040517f367f76e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160009054906101000a900460ff161561045a576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156104c0576040517f4526170b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461063057600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062290610d3d565b60405180910390fd5b6104c1565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561068557600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff1615610745578160000154600282600201548154811061071957610718610c2c565b5b906000526020600020906002020160010160008282546107399190610c8a565b92505081905550610765565b816000015481600001600082825461075d9190610c8a565b925050819055505b505050565b6000806000905060005b6002805490508110156107ed57816002828154811061079657610795610c2c565b5b90600052602060002090600202016001015411156107da57600281815481106107c2576107c1610c2c565b5b90600052602060002090600202016001015491508092505b80806107e590610d5d565b915050610774565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610877576040517fab4e909900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156108fe576040517ff8f651a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461094d57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60006002610a0061076a565b81548110610a1157610a10610c2c565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b610a4081610a2d565b8114610a4b57600080fd5b50565b600081359050610a5d81610a37565b92915050565b600060208284031215610a7957610a78610a28565b5b6000610a8784828501610a4e565b91505092915050565b6000819050919050565b610aa381610a90565b82525050565b610ab281610a2d565b82525050565b6000604082019050610acd6000830185610a9a565b610ada6020830184610aa9565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0c82610ae1565b9050919050565b610b1c81610b01565b82525050565b6000602082019050610b376000830184610b13565b92915050565b610b4681610b01565b8114610b5157600080fd5b50565b600081359050610b6381610b3d565b92915050565b600060208284031215610b7f57610b7e610a28565b5b6000610b8d84828501610b54565b91505092915050565b6000602082019050610bab6000830184610aa9565b92915050565b60008115159050919050565b610bc681610bb1565b82525050565b6000608082019050610be16000830187610aa9565b610bee6020830186610bbd565b610bfb6040830185610b13565b610c086060830184610aa9565b95945050505050565b6000602082019050610c266000830184610a9a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9582610a2d565b9150610ca083610a2d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cd557610cd4610c5b565b5b828201905092915050565b600082825260208201905092915050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610d27601983610ce0565b9150610d3282610cf1565b602082019050919050565b60006020820190508181036000830152610d5681610d1a565b9050919050565b6000610d6882610a2d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9b57610d9a610c5b565b5b60018201905091905056fea264697066735822122049b3d7a08e25d6a0a16c32136bebce5f41cf0685b8390797680092601d2b7ed564736f6c634300080b0033",
  "devdoc": {
    "author": "Ibrahim Shittu",
    "kind": "dev",
    "methods": {
      "winningProposal()": {
        "details": "Computes the winning proposal taking all previous votes into account."
      }
    },
    "title": "A sample Voting Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new ballot to choose one of `proposalNames`."
      },
      "delegate(address)": {
        "notice": "Delegate your vote to the voter `to`."
      },
      "vote(uint256)": {
        "notice": "Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`."
      }
    },
    "notice": "This contract is to create a voting contract where the chairman can          assign voting right to eligible voters",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "chairperson",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Voter)19_storage)"
      },
      {
        "astId": 35,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)24_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)24_storage)dyn_storage": {
        "base": "t_struct(Proposal)24_storage",
        "encoding": "dynamic_array",
        "label": "struct Ballot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Voter)19_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ballot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)19_storage"
      },
      "t_struct(Proposal)24_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 23,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)19_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Voter",
        "members": [
          {
            "astId": 12,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "weight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 16,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "delegate",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}